
Billing Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000096a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  0000096a  000009fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800136  00800136  00000ad4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000173c  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a29  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dbe  00000000  00000000  00002ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00003b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000587  00000000  00000000  00003dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc3  00000000  00000000  00004373  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005136  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  14:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  28:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  4c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  54:	80 03       	fmuls	r16, r16
  56:	99 03       	fmulsu	r17, r17
  58:	b2 03       	fmuls	r19, r18
  5a:	cb 03       	fmulsu	r20, r19
  5c:	e3 03       	fmuls	r22, r19
  5e:	e3 03       	fmuls	r22, r19
  60:	e3 03       	fmuls	r22, r19
  62:	e3 03       	fmuls	r22, r19
  64:	e3 03       	fmuls	r22, r19
  66:	e3 03       	fmuls	r22, r19
  68:	e3 03       	fmuls	r22, r19
  6a:	e3 03       	fmuls	r22, r19
  6c:	e3 03       	fmuls	r22, r19
  6e:	e3 03       	fmuls	r22, r19
  70:	e3 03       	fmuls	r22, r19
  72:	e3 03       	fmuls	r22, r19
  74:	e3 03       	fmuls	r22, r19
  76:	e3 03       	fmuls	r22, r19
  78:	e3 03       	fmuls	r22, r19
  7a:	e3 03       	fmuls	r22, r19
  7c:	e3 03       	fmuls	r22, r19
  7e:	e3 03       	fmuls	r22, r19
  80:	e3 03       	fmuls	r22, r19
  82:	e3 03       	fmuls	r22, r19
  84:	e3 03       	fmuls	r22, r19
  86:	e3 03       	fmuls	r22, r19
  88:	e3 03       	fmuls	r22, r19
  8a:	e3 03       	fmuls	r22, r19
  8c:	e3 03       	fmuls	r22, r19
  8e:	e3 03       	fmuls	r22, r19
  90:	e3 03       	fmuls	r22, r19
  92:	e3 03       	fmuls	r22, r19
  94:	80 03       	fmuls	r16, r16
  96:	99 03       	fmulsu	r17, r17
  98:	b2 03       	fmuls	r19, r18
  9a:	cb 03       	fmulsu	r20, r19
  9c:	f0 03       	fmuls	r23, r16
  9e:	09 04       	cpc	r0, r9
  a0:	22 04       	cpc	r2, r2
  a2:	3b 04       	cpc	r3, r11
  a4:	53 04       	cpc	r5, r3
  a6:	53 04       	cpc	r5, r3
  a8:	53 04       	cpc	r5, r3
  aa:	53 04       	cpc	r5, r3
  ac:	53 04       	cpc	r5, r3
  ae:	53 04       	cpc	r5, r3
  b0:	53 04       	cpc	r5, r3
  b2:	53 04       	cpc	r5, r3
  b4:	53 04       	cpc	r5, r3
  b6:	53 04       	cpc	r5, r3
  b8:	53 04       	cpc	r5, r3
  ba:	53 04       	cpc	r5, r3
  bc:	53 04       	cpc	r5, r3
  be:	53 04       	cpc	r5, r3
  c0:	53 04       	cpc	r5, r3
  c2:	53 04       	cpc	r5, r3
  c4:	53 04       	cpc	r5, r3
  c6:	53 04       	cpc	r5, r3
  c8:	53 04       	cpc	r5, r3
  ca:	53 04       	cpc	r5, r3
  cc:	53 04       	cpc	r5, r3
  ce:	53 04       	cpc	r5, r3
  d0:	53 04       	cpc	r5, r3
  d2:	53 04       	cpc	r5, r3
  d4:	53 04       	cpc	r5, r3
  d6:	53 04       	cpc	r5, r3
  d8:	53 04       	cpc	r5, r3
  da:	53 04       	cpc	r5, r3
  dc:	f0 03       	fmuls	r23, r16
  de:	09 04       	cpc	r0, r9
  e0:	22 04       	cpc	r2, r2
  e2:	3b 04       	cpc	r3, r11
  e4:	5f 04       	cpc	r5, r15
  e6:	61 04       	cpc	r6, r1
  e8:	63 04       	cpc	r6, r3
  ea:	65 04       	cpc	r6, r5
  ec:	66 04       	cpc	r6, r6
  ee:	66 04       	cpc	r6, r6
  f0:	66 04       	cpc	r6, r6
  f2:	66 04       	cpc	r6, r6
  f4:	66 04       	cpc	r6, r6
  f6:	66 04       	cpc	r6, r6
  f8:	66 04       	cpc	r6, r6
  fa:	66 04       	cpc	r6, r6
  fc:	66 04       	cpc	r6, r6
  fe:	66 04       	cpc	r6, r6
 100:	66 04       	cpc	r6, r6
 102:	66 04       	cpc	r6, r6
 104:	66 04       	cpc	r6, r6
 106:	66 04       	cpc	r6, r6
 108:	66 04       	cpc	r6, r6
 10a:	66 04       	cpc	r6, r6
 10c:	66 04       	cpc	r6, r6
 10e:	66 04       	cpc	r6, r6
 110:	66 04       	cpc	r6, r6
 112:	66 04       	cpc	r6, r6
 114:	66 04       	cpc	r6, r6
 116:	66 04       	cpc	r6, r6
 118:	66 04       	cpc	r6, r6
 11a:	66 04       	cpc	r6, r6
 11c:	66 04       	cpc	r6, r6
 11e:	66 04       	cpc	r6, r6
 120:	66 04       	cpc	r6, r6
 122:	66 04       	cpc	r6, r6
 124:	5f 04       	cpc	r5, r15
 126:	61 04       	cpc	r6, r1
 128:	63 04       	cpc	r6, r3
 12a:	65 04       	cpc	r6, r5
 12c:	74 04       	cpc	r7, r4
 12e:	7b 04       	cpc	r7, r11
 130:	82 04       	cpc	r8, r2
 132:	89 04       	cpc	r8, r9
 134:	8f 04       	cpc	r8, r15
 136:	8f 04       	cpc	r8, r15
 138:	8f 04       	cpc	r8, r15
 13a:	8f 04       	cpc	r8, r15
 13c:	8f 04       	cpc	r8, r15
 13e:	8f 04       	cpc	r8, r15
 140:	8f 04       	cpc	r8, r15
 142:	8f 04       	cpc	r8, r15
 144:	8f 04       	cpc	r8, r15
 146:	8f 04       	cpc	r8, r15
 148:	8f 04       	cpc	r8, r15
 14a:	8f 04       	cpc	r8, r15
 14c:	8f 04       	cpc	r8, r15
 14e:	8f 04       	cpc	r8, r15
 150:	8f 04       	cpc	r8, r15
 152:	8f 04       	cpc	r8, r15
 154:	8f 04       	cpc	r8, r15
 156:	8f 04       	cpc	r8, r15
 158:	8f 04       	cpc	r8, r15
 15a:	8f 04       	cpc	r8, r15
 15c:	8f 04       	cpc	r8, r15
 15e:	8f 04       	cpc	r8, r15
 160:	8f 04       	cpc	r8, r15
 162:	8f 04       	cpc	r8, r15
 164:	8f 04       	cpc	r8, r15
 166:	8f 04       	cpc	r8, r15
 168:	8f 04       	cpc	r8, r15
 16a:	8f 04       	cpc	r8, r15
 16c:	74 04       	cpc	r7, r4
 16e:	7b 04       	cpc	r7, r11
 170:	82 04       	cpc	r8, r2
 172:	89 04       	cpc	r8, r9

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf e5       	ldi	r28, 0x5F	; 95
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e6       	ldi	r26, 0x60	; 96
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	ea e6       	ldi	r30, 0x6A	; 106
 188:	f9 e0       	ldi	r31, 0x09	; 9
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
 18c:	05 90       	lpm	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	a6 33       	cpi	r26, 0x36	; 54
 192:	b1 07       	cpc	r27, r17
 194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>

00000196 <__do_clear_bss>:
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	a6 e3       	ldi	r26, 0x36	; 54
 19a:	b1 e0       	ldi	r27, 0x01	; 1
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
 19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
 1a0:	aa 33       	cpi	r26, 0x3A	; 58
 1a2:	b2 07       	cpc	r27, r18
 1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>
 1a6:	0e 94 08 03 	call	0x610	; 0x610 <main>
 1aa:	0c 94 b3 04 	jmp	0x966	; 0x966 <_exit>

000001ae <__bad_interrupt>:
 1ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b2 <EN_pulse>:
	
	#endif
}

static void EN_pulse(){
	DIO_vwritepin(CMD_PORT,EN,1);
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	62 e0       	ldi	r22, 0x02	; 2
 1b6:	83 e4       	ldi	r24, 0x43	; 67
 1b8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vwritepin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	8f ec       	ldi	r24, 0xCF	; 207
 1be:	97 e0       	ldi	r25, 0x07	; 7
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <EN_pulse+0xe>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <EN_pulse+0x14>
 1c6:	00 00       	nop
	_delay_ms(1);
	DIO_vwritepin(CMD_PORT,EN,0);
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	83 e4       	ldi	r24, 0x43	; 67
 1ce:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vwritepin>
 1d2:	8f ec       	ldi	r24, 0xCF	; 207
 1d4:	97 e0       	ldi	r25, 0x07	; 7
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <EN_pulse+0x24>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <EN_pulse+0x2a>
 1dc:	00 00       	nop
 1de:	08 95       	ret

000001e0 <LCD_vsend_cmd>:
	_delay_ms(1);
}

void LCD_vsend_cmd(unsigned char cmd){
 1e0:	cf 93       	push	r28
 1e2:	c8 2f       	mov	r28, r24
	DIO_vwritepin(CMD_PORT,RS,0);
	EN_pulse();
	
	#elif defined _4BIT_MODE
	
	DIO_vwrite_HIGHnibble(DATA_PORT,cmd>>4);
 1e4:	68 2f       	mov	r22, r24
 1e6:	62 95       	swap	r22
 1e8:	6f 70       	andi	r22, 0x0F	; 15
 1ea:	83 e4       	ldi	r24, 0x43	; 67
 1ec:	0e 94 67 04 	call	0x8ce	; 0x8ce <DIO_vwrite_HIGHnibble>
	DIO_vwritepin(CMD_PORT,RS,0);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	83 e4       	ldi	r24, 0x43	; 67
 1f6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vwritepin>
	EN_pulse();
 1fa:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <EN_pulse>
	DIO_vwrite_HIGHnibble(DATA_PORT,cmd);
 1fe:	6c 2f       	mov	r22, r28
 200:	83 e4       	ldi	r24, 0x43	; 67
 202:	0e 94 67 04 	call	0x8ce	; 0x8ce <DIO_vwrite_HIGHnibble>
	DIO_vwritepin(CMD_PORT,RS,0);
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	83 e4       	ldi	r24, 0x43	; 67
 20c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vwritepin>
	EN_pulse();
 210:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <EN_pulse>
	
	#endif
}
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCD_vinit>:
 218:	2f ef       	ldi	r18, 0xFF	; 255
 21a:	80 e7       	ldi	r24, 0x70	; 112
 21c:	92 e0       	ldi	r25, 0x02	; 2
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <LCD_vinit+0x6>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_vinit+0x10>
 228:	00 00       	nop
	LCD_vsend_cmd(ENTRY_MODE);
	_delay_ms(1);
	
	#elif defined _4BIT_MODE
	
	DIO_vsetport_dir(DATA_PORT,0xf0);
 22a:	60 ef       	ldi	r22, 0xF0	; 240
 22c:	83 e4       	ldi	r24, 0x43	; 67
 22e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <DIO_vsetport_dir>
	DIO_vsetpin_dir(CMD_PORT,RS,1);
 232:	41 e0       	ldi	r20, 0x01	; 1
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	83 e4       	ldi	r24, 0x43	; 67
 238:	0e 94 74 03 	call	0x6e8	; 0x6e8 <DIO_vsetpin_dir>
	DIO_vsetpin_dir(CMD_PORT,RW,1);
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	83 e4       	ldi	r24, 0x43	; 67
 242:	0e 94 74 03 	call	0x6e8	; 0x6e8 <DIO_vsetpin_dir>
	DIO_vsetpin_dir(CMD_PORT,EN,1);
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	83 e4       	ldi	r24, 0x43	; 67
 24c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <DIO_vsetpin_dir>
	DIO_vwritepin(CMD_PORT,RW,0);
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	83 e4       	ldi	r24, 0x43	; 67
 256:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vwritepin>
	LCD_vsend_cmd(RETURN_HOME);
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vsend_cmd>
 260:	8f e0       	ldi	r24, 0x0F	; 15
 262:	97 e2       	ldi	r25, 0x27	; 39
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <LCD_vinit+0x4c>
 268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_vinit+0x52>
 26a:	00 00       	nop
	_delay_ms(5);
	LCD_vsend_cmd(_4BITS);
 26c:	88 e2       	ldi	r24, 0x28	; 40
 26e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vsend_cmd>
 272:	8f ec       	ldi	r24, 0xCF	; 207
 274:	97 e0       	ldi	r25, 0x07	; 7
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_vinit+0x5e>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_vinit+0x64>
 27c:	00 00       	nop
	_delay_ms(1);
	LCD_vsend_cmd(CURSOR_ON_DISPLAY_ON);
 27e:	8e e0       	ldi	r24, 0x0E	; 14
 280:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vsend_cmd>
 284:	8f ec       	ldi	r24, 0xCF	; 207
 286:	97 e0       	ldi	r25, 0x07	; 7
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCD_vinit+0x70>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <LCD_vinit+0x76>
 28e:	00 00       	nop
	_delay_ms(1);
	LCD_vsend_cmd(CLR_SCREEN);
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vsend_cmd>
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	97 e2       	ldi	r25, 0x27	; 39
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_vinit+0x82>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_vinit+0x88>
 2a0:	00 00       	nop
	_delay_ms(5);
	LCD_vsend_cmd(ENTRY_MODE);
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vsend_cmd>
 2a8:	8f ec       	ldi	r24, 0xCF	; 207
 2aa:	97 e0       	ldi	r25, 0x07	; 7
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCD_vinit+0x94>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <LCD_vinit+0x9a>
 2b2:	00 00       	nop
 2b4:	08 95       	ret

000002b6 <LCD_vsend_char>:
	EN_pulse();
	
	#endif
}

void LCD_vsend_char(unsigned char data){
 2b6:	cf 93       	push	r28
 2b8:	c8 2f       	mov	r28, r24
	DIO_vwritepin(CMD_PORT,RS,1);
	EN_pulse();
	
	#elif defined _4BIT_MODE
	
	DIO_vwrite_HIGHnibble(DATA_PORT,data>>4);
 2ba:	68 2f       	mov	r22, r24
 2bc:	62 95       	swap	r22
 2be:	6f 70       	andi	r22, 0x0F	; 15
 2c0:	83 e4       	ldi	r24, 0x43	; 67
 2c2:	0e 94 67 04 	call	0x8ce	; 0x8ce <DIO_vwrite_HIGHnibble>
	DIO_vwritepin(CMD_PORT,RS,1);
 2c6:	41 e0       	ldi	r20, 0x01	; 1
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	83 e4       	ldi	r24, 0x43	; 67
 2cc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vwritepin>
	EN_pulse();
 2d0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <EN_pulse>
	DIO_vwrite_HIGHnibble(DATA_PORT,data);
 2d4:	6c 2f       	mov	r22, r28
 2d6:	83 e4       	ldi	r24, 0x43	; 67
 2d8:	0e 94 67 04 	call	0x8ce	; 0x8ce <DIO_vwrite_HIGHnibble>
	DIO_vwritepin(CMD_PORT,RS,1);
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	83 e4       	ldi	r24, 0x43	; 67
 2e2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vwritepin>
	EN_pulse();
 2e6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <EN_pulse>
	
	#endif
}
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <LCD_vsend_string>:

void LCD_vsend_string(unsigned char* data){
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	ec 01       	movw	r28, r24
	while(*data!='\0'){
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <LCD_vsend_string+0xe>
		LCD_vsend_char(*data);
 2f6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_vsend_char>
		data++;
 2fa:	21 96       	adiw	r28, 0x01	; 1
	
	#endif
}

void LCD_vsend_string(unsigned char* data){
	while(*data!='\0'){
 2fc:	88 81       	ld	r24, Y
 2fe:	81 11       	cpse	r24, r1
 300:	fa cf       	rjmp	.-12     	; 0x2f6 <LCD_vsend_string+0x8>
		LCD_vsend_char(*data);
		data++;
	}
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <LCD_vCLR_screen>:

void LCD_vCLR_screen(){
	LCD_vsend_cmd(CLR_SCREEN);
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vsend_cmd>
 30e:	8f e0       	ldi	r24, 0x0F	; 15
 310:	97 e2       	ldi	r25, 0x27	; 39
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCD_vCLR_screen+0xa>
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_vCLR_screen+0x10>
 318:	00 00       	nop
 31a:	08 95       	ret

0000031c <LCD_vmove_cursor>:
	_delay_ms(5);
}

void LCD_vmove_cursor(signed char row,signed char coloumn){
	if(row>2||row<1||coloumn>16||coloumn<1)LCD_vsend_cmd(0x80);
 31c:	9f ef       	ldi	r25, 0xFF	; 255
 31e:	98 0f       	add	r25, r24
 320:	92 30       	cpi	r25, 0x02	; 2
 322:	20 f4       	brcc	.+8      	; 0x32c <LCD_vmove_cursor+0x10>
 324:	61 31       	cpi	r22, 0x11	; 17
 326:	14 f4       	brge	.+4      	; 0x32c <LCD_vmove_cursor+0x10>
 328:	16 16       	cp	r1, r22
 32a:	24 f0       	brlt	.+8      	; 0x334 <LCD_vmove_cursor+0x18>
 32c:	80 e8       	ldi	r24, 0x80	; 128
 32e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vsend_cmd>
 332:	0d c0       	rjmp	.+26     	; 0x34e <LCD_vmove_cursor+0x32>
	else if(row==1)LCD_vsend_cmd(0x80+coloumn-1);
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	29 f4       	brne	.+10     	; 0x342 <LCD_vmove_cursor+0x26>
 338:	8f e7       	ldi	r24, 0x7F	; 127
 33a:	86 0f       	add	r24, r22
 33c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vsend_cmd>
 340:	06 c0       	rjmp	.+12     	; 0x34e <LCD_vmove_cursor+0x32>
	else if(row==2)LCD_vsend_cmd(0xc0+coloumn-1);
 342:	82 30       	cpi	r24, 0x02	; 2
 344:	21 f4       	brne	.+8      	; 0x34e <LCD_vmove_cursor+0x32>
 346:	8f eb       	ldi	r24, 0xBF	; 191
 348:	86 0f       	add	r24, r22
 34a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vsend_cmd>
 34e:	8f ec       	ldi	r24, 0xCF	; 207
 350:	97 e0       	ldi	r25, 0x07	; 7
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <LCD_vmove_cursor+0x36>
 356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_vmove_cursor+0x3c>
 358:	00 00       	nop
 35a:	08 95       	ret

0000035c <receiving>:
			LCD_vsend_string("   Smart Store  ");
		}
    }
}

int receiving(){
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
	unsigned char received;
	for(int i=0;i<ITEMS_COUNT;i++){
 364:	c0 e0       	ldi	r28, 0x00	; 0
 366:	d0 e0       	ldi	r29, 0x00	; 0
 368:	17 c0       	rjmp	.+46     	; 0x398 <receiving+0x3c>
		for(int j=0;j<BAR_CODE_LENGTH;j++){
			//received = USART_u8receive_data();
			received = SPI_Slave_Receive_char(DUMMY_DATA);
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	0e 94 99 04 	call	0x932	; 0x932 <SPI_Slave_Receive_char>
			//_delay_ms(300);
			if(received == END_MESSAGE){
 370:	83 33       	cpi	r24, 0x33	; 51
 372:	19 f4       	brne	.+6      	; 0x37a <receiving+0x1e>
				return i+1;
 374:	ce 01       	movw	r24, r28
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	14 c0       	rjmp	.+40     	; 0x3a2 <receiving+0x46>
			}
			receivedProducts[i][j] = received;
 37a:	fe 01       	movw	r30, r28
 37c:	e8 5c       	subi	r30, 0xC8	; 200
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	e0 0f       	add	r30, r16
 382:	f1 1f       	adc	r31, r17
 384:	80 83       	st	Z, r24
}

int receiving(){
	unsigned char received;
	for(int i=0;i<ITEMS_COUNT;i++){
		for(int j=0;j<BAR_CODE_LENGTH;j++){
 386:	0f 5f       	subi	r16, 0xFF	; 255
 388:	1f 4f       	sbci	r17, 0xFF	; 255
 38a:	02 c0       	rjmp	.+4      	; 0x390 <receiving+0x34>
 38c:	00 e0       	ldi	r16, 0x00	; 0
 38e:	10 e0       	ldi	r17, 0x00	; 0
 390:	10 16       	cp	r1, r16
 392:	11 06       	cpc	r1, r17
 394:	54 f7       	brge	.-44     	; 0x36a <receiving+0xe>
    }
}

int receiving(){
	unsigned char received;
	for(int i=0;i<ITEMS_COUNT;i++){
 396:	21 96       	adiw	r28, 0x01	; 1
 398:	c2 30       	cpi	r28, 0x02	; 2
 39a:	d1 05       	cpc	r29, r1
 39c:	bc f3       	brlt	.-18     	; 0x38c <receiving+0x30>
				return i+1;
			}
			receivedProducts[i][j] = received;
		}
	}
	return ITEMS_COUNT;
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	90 e0       	ldi	r25, 0x00	; 0
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	08 95       	ret

000003ac <calculatingCost>:

void calculatingCost(int items){
	int found;
	//int *ptr;
	for(int i=0;i<items;i++){
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	42 c0       	rjmp	.+132    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		found = 0;
		//ptr = products[i].barcode;
		for(int j=0;j<BAR_CODE_LENGTH;j++){
			//if(receivedProducts[i][j] != ptr[j]){
			if(receivedProducts[i][j] != products[i].barcode){
 3b2:	f9 01       	movw	r30, r18
 3b4:	e8 5c       	subi	r30, 0xC8	; 200
 3b6:	fe 4f       	sbci	r31, 0xFE	; 254
 3b8:	e4 0f       	add	r30, r20
 3ba:	f5 1f       	adc	r31, r21
 3bc:	60 81       	ld	r22, Z
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	f9 01       	movw	r30, r18
 3c2:	ee 0f       	add	r30, r30
 3c4:	ff 1f       	adc	r31, r31
 3c6:	e2 0f       	add	r30, r18
 3c8:	f3 1f       	adc	r31, r19
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	ee 0f       	add	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	ee 0f       	add	r30, r30
 3d4:	ff 1f       	adc	r31, r31
 3d6:	e0 5a       	subi	r30, 0xA0	; 160
 3d8:	ff 4f       	sbci	r31, 0xFF	; 255
 3da:	04 88       	ldd	r0, Z+20	; 0x14
 3dc:	f5 89       	ldd	r31, Z+21	; 0x15
 3de:	e0 2d       	mov	r30, r0
 3e0:	6e 17       	cp	r22, r30
 3e2:	7f 07       	cpc	r23, r31
 3e4:	59 f4       	brne	.+22     	; 0x3fc <calculatingCost+0x50>
				break;
			}
			found++;
 3e6:	11 96       	adiw	r26, 0x01	; 1
	int found;
	//int *ptr;
	for(int i=0;i<items;i++){
		found = 0;
		//ptr = products[i].barcode;
		for(int j=0;j<BAR_CODE_LENGTH;j++){
 3e8:	4f 5f       	subi	r20, 0xFF	; 255
 3ea:	5f 4f       	sbci	r21, 0xFF	; 255
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <calculatingCost+0x4a>
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	a0 e0       	ldi	r26, 0x00	; 0
 3f4:	b0 e0       	ldi	r27, 0x00	; 0
 3f6:	14 16       	cp	r1, r20
 3f8:	15 06       	cpc	r1, r21
 3fa:	dc f6       	brge	.-74     	; 0x3b2 <calculatingCost+0x6>
			if(receivedProducts[i][j] != products[i].barcode){
				break;
			}
			found++;
		}
		if(found == BAR_CODE_LENGTH){
 3fc:	11 97       	sbiw	r26, 0x01	; 1
 3fe:	c9 f4       	brne	.+50     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			totalCost += products[i].price;
 400:	f9 01       	movw	r30, r18
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	e2 0f       	add	r30, r18
 408:	f3 1f       	adc	r31, r19
 40a:	ee 0f       	add	r30, r30
 40c:	ff 1f       	adc	r31, r31
 40e:	ee 0f       	add	r30, r30
 410:	ff 1f       	adc	r31, r31
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	e0 5a       	subi	r30, 0xA0	; 160
 418:	ff 4f       	sbci	r31, 0xFF	; 255
 41a:	66 89       	ldd	r22, Z+22	; 0x16
 41c:	77 89       	ldd	r23, Z+23	; 0x17
 41e:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <__data_end>
 422:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <__data_end+0x1>
 426:	46 0f       	add	r20, r22
 428:	57 1f       	adc	r21, r23
 42a:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <__data_end+0x1>
 42e:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <__data_end>
}

void calculatingCost(int items){
	int found;
	//int *ptr;
	for(int i=0;i<items;i++){
 432:	2f 5f       	subi	r18, 0xFF	; 255
 434:	3f 4f       	sbci	r19, 0xFF	; 255
 436:	28 17       	cp	r18, r24
 438:	39 07       	cpc	r19, r25
 43a:	cc f2       	brlt	.-78     	; 0x3ee <calculatingCost+0x42>
		}
		if(found == BAR_CODE_LENGTH){
			totalCost += products[i].price;
		}
	}
}
 43c:	08 95       	ret

0000043e <printCost>:

void printCost(){
	LCD_vCLR_screen();
 43e:	0e 94 84 01 	call	0x308	; 0x308 <LCD_vCLR_screen>
	LCD_vsend_string("Total Cost=");
 442:	80 ec       	ldi	r24, 0xC0	; 192
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_vsend_string>
	//totalCost = totalCost % 1000;
	if(totalCost<10){
 44a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 44e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
 452:	0a 97       	sbiw	r24, 0x0a	; 10
 454:	40 f4       	brcc	.+16     	; 0x466 <printCost+0x28>
		LCD_vsend_char((char)(totalCost)+48);
 456:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 45a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
 45e:	80 5d       	subi	r24, 0xD0	; 208
 460:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_vsend_char>
 464:	cb c0       	rjmp	.+406    	; 0x5fc <printCost+0x1be>
	}
	else if(totalCost<100){
 466:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 46a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
 46e:	84 36       	cpi	r24, 0x64	; 100
 470:	91 05       	cpc	r25, r1
 472:	08 f0       	brcs	.+2      	; 0x476 <printCost+0x38>
 474:	4c c0       	rjmp	.+152    	; 0x50e <printCost+0xd0>
		LCD_vsend_char((char)((totalCost/10)%10)+48);
 476:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__data_end>
 47a:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <__data_end+0x1>
 47e:	ad ec       	ldi	r26, 0xCD	; 205
 480:	bc ec       	ldi	r27, 0xCC	; 204
 482:	0e 94 a4 04 	call	0x948	; 0x948 <__umulhisi3>
 486:	ac 01       	movw	r20, r24
 488:	56 95       	lsr	r21
 48a:	47 95       	ror	r20
 48c:	56 95       	lsr	r21
 48e:	47 95       	ror	r20
 490:	56 95       	lsr	r21
 492:	47 95       	ror	r20
 494:	9a 01       	movw	r18, r20
 496:	0e 94 a4 04 	call	0x948	; 0x948 <__umulhisi3>
 49a:	96 95       	lsr	r25
 49c:	87 95       	ror	r24
 49e:	96 95       	lsr	r25
 4a0:	87 95       	ror	r24
 4a2:	96 95       	lsr	r25
 4a4:	87 95       	ror	r24
 4a6:	9c 01       	movw	r18, r24
 4a8:	22 0f       	add	r18, r18
 4aa:	33 1f       	adc	r19, r19
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	82 0f       	add	r24, r18
 4ba:	93 1f       	adc	r25, r19
 4bc:	9a 01       	movw	r18, r20
 4be:	28 1b       	sub	r18, r24
 4c0:	39 0b       	sbc	r19, r25
 4c2:	c9 01       	movw	r24, r18
 4c4:	80 5d       	subi	r24, 0xD0	; 208
 4c6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_vsend_char>
		LCD_vsend_char((char)(totalCost%10)+48);
 4ca:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <__data_end>
 4ce:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <__data_end+0x1>
 4d2:	9a 01       	movw	r18, r20
 4d4:	ad ec       	ldi	r26, 0xCD	; 205
 4d6:	bc ec       	ldi	r27, 0xCC	; 204
 4d8:	0e 94 a4 04 	call	0x948	; 0x948 <__umulhisi3>
 4dc:	96 95       	lsr	r25
 4de:	87 95       	ror	r24
 4e0:	96 95       	lsr	r25
 4e2:	87 95       	ror	r24
 4e4:	96 95       	lsr	r25
 4e6:	87 95       	ror	r24
 4e8:	9c 01       	movw	r18, r24
 4ea:	22 0f       	add	r18, r18
 4ec:	33 1f       	adc	r19, r19
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	82 0f       	add	r24, r18
 4fc:	93 1f       	adc	r25, r19
 4fe:	9a 01       	movw	r18, r20
 500:	28 1b       	sub	r18, r24
 502:	39 0b       	sbc	r19, r25
 504:	c9 01       	movw	r24, r18
 506:	80 5d       	subi	r24, 0xD0	; 208
 508:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_vsend_char>
 50c:	77 c0       	rjmp	.+238    	; 0x5fc <printCost+0x1be>
	}
	else{
		LCD_vsend_char((char)((totalCost/100)%10)+48);
 50e:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__data_end>
 512:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <__data_end+0x1>
 516:	36 95       	lsr	r19
 518:	27 95       	ror	r18
 51a:	36 95       	lsr	r19
 51c:	27 95       	ror	r18
 51e:	ab e7       	ldi	r26, 0x7B	; 123
 520:	b4 e1       	ldi	r27, 0x14	; 20
 522:	0e 94 a4 04 	call	0x948	; 0x948 <__umulhisi3>
 526:	ac 01       	movw	r20, r24
 528:	56 95       	lsr	r21
 52a:	47 95       	ror	r20
 52c:	9a 01       	movw	r18, r20
 52e:	ad ec       	ldi	r26, 0xCD	; 205
 530:	bc ec       	ldi	r27, 0xCC	; 204
 532:	0e 94 a4 04 	call	0x948	; 0x948 <__umulhisi3>
 536:	96 95       	lsr	r25
 538:	87 95       	ror	r24
 53a:	96 95       	lsr	r25
 53c:	87 95       	ror	r24
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	9c 01       	movw	r18, r24
 544:	22 0f       	add	r18, r18
 546:	33 1f       	adc	r19, r19
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	82 0f       	add	r24, r18
 556:	93 1f       	adc	r25, r19
 558:	9a 01       	movw	r18, r20
 55a:	28 1b       	sub	r18, r24
 55c:	39 0b       	sbc	r19, r25
 55e:	c9 01       	movw	r24, r18
 560:	80 5d       	subi	r24, 0xD0	; 208
 562:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_vsend_char>
		LCD_vsend_char((char)((totalCost/10)%10)+48);
 566:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__data_end>
 56a:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <__data_end+0x1>
 56e:	ad ec       	ldi	r26, 0xCD	; 205
 570:	bc ec       	ldi	r27, 0xCC	; 204
 572:	0e 94 a4 04 	call	0x948	; 0x948 <__umulhisi3>
 576:	ac 01       	movw	r20, r24
 578:	56 95       	lsr	r21
 57a:	47 95       	ror	r20
 57c:	56 95       	lsr	r21
 57e:	47 95       	ror	r20
 580:	56 95       	lsr	r21
 582:	47 95       	ror	r20
 584:	9a 01       	movw	r18, r20
 586:	0e 94 a4 04 	call	0x948	; 0x948 <__umulhisi3>
 58a:	96 95       	lsr	r25
 58c:	87 95       	ror	r24
 58e:	96 95       	lsr	r25
 590:	87 95       	ror	r24
 592:	96 95       	lsr	r25
 594:	87 95       	ror	r24
 596:	9c 01       	movw	r18, r24
 598:	22 0f       	add	r18, r18
 59a:	33 1f       	adc	r19, r19
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	82 0f       	add	r24, r18
 5aa:	93 1f       	adc	r25, r19
 5ac:	9a 01       	movw	r18, r20
 5ae:	28 1b       	sub	r18, r24
 5b0:	39 0b       	sbc	r19, r25
 5b2:	c9 01       	movw	r24, r18
 5b4:	80 5d       	subi	r24, 0xD0	; 208
 5b6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_vsend_char>
		LCD_vsend_char((char)(totalCost%10)+48);
 5ba:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <__data_end>
 5be:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <__data_end+0x1>
 5c2:	9a 01       	movw	r18, r20
 5c4:	ad ec       	ldi	r26, 0xCD	; 205
 5c6:	bc ec       	ldi	r27, 0xCC	; 204
 5c8:	0e 94 a4 04 	call	0x948	; 0x948 <__umulhisi3>
 5cc:	96 95       	lsr	r25
 5ce:	87 95       	ror	r24
 5d0:	96 95       	lsr	r25
 5d2:	87 95       	ror	r24
 5d4:	96 95       	lsr	r25
 5d6:	87 95       	ror	r24
 5d8:	9c 01       	movw	r18, r24
 5da:	22 0f       	add	r18, r18
 5dc:	33 1f       	adc	r19, r19
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	88 0f       	add	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	82 0f       	add	r24, r18
 5ec:	93 1f       	adc	r25, r19
 5ee:	9a 01       	movw	r18, r20
 5f0:	28 1b       	sub	r18, r24
 5f2:	39 0b       	sbc	r19, r25
 5f4:	c9 01       	movw	r24, r18
 5f6:	80 5d       	subi	r24, 0xD0	; 208
 5f8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_vsend_char>
 5fc:	3f ef       	ldi	r19, 0xFF	; 255
 5fe:	89 e6       	ldi	r24, 0x69	; 105
 600:	98 e1       	ldi	r25, 0x18	; 24
 602:	31 50       	subi	r19, 0x01	; 1
 604:	80 40       	sbci	r24, 0x00	; 0
 606:	90 40       	sbci	r25, 0x00	; 0
 608:	e1 f7       	brne	.-8      	; 0x602 <printCost+0x1c4>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <printCost+0x1ce>
 60c:	00 00       	nop
 60e:	08 95       	ret

00000610 <main>:
volatile unsigned int testArray[ITEMS_COUNT] = {200, 201};

int main(void)
{
	int items;
    LCD_vinit();
 610:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_vinit>
	LCD_vsend_string(" Welcome To Our ");
 614:	8c ec       	ldi	r24, 0xCC	; 204
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_vsend_string>
	LCD_vmove_cursor(2,1);
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	82 e0       	ldi	r24, 0x02	; 2
 620:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_vmove_cursor>
	LCD_vsend_string("   Smart Store  ");
 624:	8d ed       	ldi	r24, 0xDD	; 221
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_vsend_string>
	//USART_vinit(9600);
	SPI_Slave_init();
 62c:	0e 94 90 04 	call	0x920	; 0x920 <SPI_Slave_init>
    while (1) 
    {
		//if(USART_u8receive_data() == START_MESSAGE){
		if(SPI_Slave_Receive_char(DUMMY_DATA) == START_MESSAGE){
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	0e 94 99 04 	call	0x932	; 0x932 <SPI_Slave_Receive_char>
 636:	85 33       	cpi	r24, 0x35	; 53
 638:	d9 f7       	brne	.-10     	; 0x630 <main+0x20>
			totalCost = 0;
 63a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0x1>
 63e:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
			LCD_vCLR_screen();
 642:	0e 94 84 01 	call	0x308	; 0x308 <LCD_vCLR_screen>
			LCD_vsend_string("Reading Products");
 646:	8e ee       	ldi	r24, 0xEE	; 238
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_vsend_string>
			LCD_vmove_cursor(2,1);
 64e:	61 e0       	ldi	r22, 0x01	; 1
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_vmove_cursor>
			LCD_vsend_string("Please Wait...");
 656:	8f ef       	ldi	r24, 0xFF	; 255
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_vsend_string>
			items = receiving();
 65e:	0e 94 ae 01 	call	0x35c	; 0x35c <receiving>
 662:	ec 01       	movw	r28, r24
			LCD_vCLR_screen();
 664:	0e 94 84 01 	call	0x308	; 0x308 <LCD_vCLR_screen>
			LCD_vsend_string("Calculating cost");
 668:	8e e0       	ldi	r24, 0x0E	; 14
 66a:	91 e0       	ldi	r25, 0x01	; 1
 66c:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_vsend_string>
			LCD_vmove_cursor(2,1);
 670:	61 e0       	ldi	r22, 0x01	; 1
 672:	82 e0       	ldi	r24, 0x02	; 2
 674:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_vmove_cursor>
			LCD_vsend_string("Please Wait...");
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_vsend_string>
 680:	2f ef       	ldi	r18, 0xFF	; 255
 682:	84 e3       	ldi	r24, 0x34	; 52
 684:	9c e0       	ldi	r25, 0x0C	; 12
 686:	21 50       	subi	r18, 0x01	; 1
 688:	80 40       	sbci	r24, 0x00	; 0
 68a:	90 40       	sbci	r25, 0x00	; 0
 68c:	e1 f7       	brne	.-8      	; 0x686 <main+0x76>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <main+0x80>
 690:	00 00       	nop
			_delay_ms(500);
			calculatingCost(items);
 692:	ce 01       	movw	r24, r28
 694:	0e 94 d6 01 	call	0x3ac	; 0x3ac <calculatingCost>
			printCost();
 698:	0e 94 1f 02 	call	0x43e	; 0x43e <printCost>
			LCD_vCLR_screen();
 69c:	0e 94 84 01 	call	0x308	; 0x308 <LCD_vCLR_screen>
			LCD_vsend_string("Thanks for");
 6a0:	8f e1       	ldi	r24, 0x1F	; 31
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_vsend_string>
			LCD_vmove_cursor(2,1);
 6a8:	61 e0       	ldi	r22, 0x01	; 1
 6aa:	82 e0       	ldi	r24, 0x02	; 2
 6ac:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_vmove_cursor>
			LCD_vsend_string("your visit");
 6b0:	8a e2       	ldi	r24, 0x2A	; 42
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_vsend_string>
 6b8:	2f ef       	ldi	r18, 0xFF	; 255
 6ba:	84 e3       	ldi	r24, 0x34	; 52
 6bc:	9c e0       	ldi	r25, 0x0C	; 12
 6be:	21 50       	subi	r18, 0x01	; 1
 6c0:	80 40       	sbci	r24, 0x00	; 0
 6c2:	90 40       	sbci	r25, 0x00	; 0
 6c4:	e1 f7       	brne	.-8      	; 0x6be <main+0xae>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <main+0xb8>
 6c8:	00 00       	nop
			_delay_ms(500);
			LCD_vCLR_screen();
 6ca:	0e 94 84 01 	call	0x308	; 0x308 <LCD_vCLR_screen>
			LCD_vsend_string(" Welcome To Our ");
 6ce:	8c ec       	ldi	r24, 0xCC	; 204
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_vsend_string>
			LCD_vmove_cursor(2,1);
 6d6:	61 e0       	ldi	r22, 0x01	; 1
 6d8:	82 e0       	ldi	r24, 0x02	; 2
 6da:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_vmove_cursor>
			LCD_vsend_string("   Smart Store  ");
 6de:	8d ed       	ldi	r24, 0xDD	; 221
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_vsend_string>
 6e6:	a4 cf       	rjmp	.-184    	; 0x630 <main+0x20>

000006e8 <DIO_vsetpin_dir>:
			PORTC&=0xf0;
			PORTC|=value;
			break;
		case 'D':
			PORTD&=0xf0;
			PORTD|=value;
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	fc 01       	movw	r30, r24
 6ec:	e1 54       	subi	r30, 0x41	; 65
 6ee:	f1 09       	sbc	r31, r1
 6f0:	e4 32       	cpi	r30, 0x24	; 36
 6f2:	f1 05       	cpc	r31, r1
 6f4:	08 f0       	brcs	.+2      	; 0x6f8 <DIO_vsetpin_dir+0x10>
 6f6:	67 c0       	rjmp	.+206    	; 0x7c6 <DIO_vsetpin_dir+0xde>
 6f8:	e6 5d       	subi	r30, 0xD6	; 214
 6fa:	ff 4f       	sbci	r31, 0xFF	; 255
 6fc:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__tablejump2__>
 700:	41 11       	cpse	r20, r1
 702:	0c c0       	rjmp	.+24     	; 0x71c <DIO_vsetpin_dir+0x34>
 704:	2a b3       	in	r18, 0x1a	; 26
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_vsetpin_dir+0x28>
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	6a 95       	dec	r22
 712:	e2 f7       	brpl	.-8      	; 0x70c <DIO_vsetpin_dir+0x24>
 714:	80 95       	com	r24
 716:	82 23       	and	r24, r18
 718:	8a bb       	out	0x1a, r24	; 26
 71a:	08 95       	ret
 71c:	2a b3       	in	r18, 0x1a	; 26
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 c0       	rjmp	.+4      	; 0x728 <DIO_vsetpin_dir+0x40>
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	6a 95       	dec	r22
 72a:	e2 f7       	brpl	.-8      	; 0x724 <DIO_vsetpin_dir+0x3c>
 72c:	82 2b       	or	r24, r18
 72e:	8a bb       	out	0x1a, r24	; 26
 730:	08 95       	ret
 732:	41 11       	cpse	r20, r1
 734:	0c c0       	rjmp	.+24     	; 0x74e <DIO_vsetpin_dir+0x66>
 736:	27 b3       	in	r18, 0x17	; 23
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_vsetpin_dir+0x5a>
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	6a 95       	dec	r22
 744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_vsetpin_dir+0x56>
 746:	80 95       	com	r24
 748:	82 23       	and	r24, r18
 74a:	87 bb       	out	0x17, r24	; 23
 74c:	08 95       	ret
 74e:	27 b3       	in	r18, 0x17	; 23
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_vsetpin_dir+0x72>
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	6a 95       	dec	r22
 75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_vsetpin_dir+0x6e>
 75e:	82 2b       	or	r24, r18
 760:	87 bb       	out	0x17, r24	; 23
 762:	08 95       	ret
 764:	41 11       	cpse	r20, r1
 766:	0c c0       	rjmp	.+24     	; 0x780 <DIO_vsetpin_dir+0x98>
 768:	24 b3       	in	r18, 0x14	; 20
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_vsetpin_dir+0x8c>
 770:	88 0f       	add	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	6a 95       	dec	r22
 776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_vsetpin_dir+0x88>
 778:	80 95       	com	r24
 77a:	82 23       	and	r24, r18
 77c:	84 bb       	out	0x14, r24	; 20
 77e:	08 95       	ret
 780:	24 b3       	in	r18, 0x14	; 20
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	02 c0       	rjmp	.+4      	; 0x78c <DIO_vsetpin_dir+0xa4>
 788:	88 0f       	add	r24, r24
 78a:	99 1f       	adc	r25, r25
 78c:	6a 95       	dec	r22
 78e:	e2 f7       	brpl	.-8      	; 0x788 <DIO_vsetpin_dir+0xa0>
 790:	82 2b       	or	r24, r18
 792:	84 bb       	out	0x14, r24	; 20
 794:	08 95       	ret
 796:	41 11       	cpse	r20, r1
 798:	0c c0       	rjmp	.+24     	; 0x7b2 <DIO_vsetpin_dir+0xca>
 79a:	21 b3       	in	r18, 0x11	; 17
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <DIO_vsetpin_dir+0xbe>
 7a2:	88 0f       	add	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	6a 95       	dec	r22
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <DIO_vsetpin_dir+0xba>
 7aa:	80 95       	com	r24
 7ac:	82 23       	and	r24, r18
 7ae:	81 bb       	out	0x11, r24	; 17
 7b0:	08 95       	ret
 7b2:	21 b3       	in	r18, 0x11	; 17
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <DIO_vsetpin_dir+0xd6>
 7ba:	88 0f       	add	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	6a 95       	dec	r22
 7c0:	e2 f7       	brpl	.-8      	; 0x7ba <DIO_vsetpin_dir+0xd2>
 7c2:	82 2b       	or	r24, r18
 7c4:	81 bb       	out	0x11, r24	; 17
 7c6:	08 95       	ret

000007c8 <DIO_vwritepin>:
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	fc 01       	movw	r30, r24
 7cc:	e1 54       	subi	r30, 0x41	; 65
 7ce:	f1 09       	sbc	r31, r1
 7d0:	e4 32       	cpi	r30, 0x24	; 36
 7d2:	f1 05       	cpc	r31, r1
 7d4:	08 f0       	brcs	.+2      	; 0x7d8 <DIO_vwritepin+0x10>
 7d6:	67 c0       	rjmp	.+206    	; 0x8a6 <__stack+0x47>
 7d8:	e2 5b       	subi	r30, 0xB2	; 178
 7da:	ff 4f       	sbci	r31, 0xFF	; 255
 7dc:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__tablejump2__>
 7e0:	41 11       	cpse	r20, r1
 7e2:	0c c0       	rjmp	.+24     	; 0x7fc <DIO_vwritepin+0x34>
 7e4:	2b b3       	in	r18, 0x1b	; 27
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_vwritepin+0x28>
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	6a 95       	dec	r22
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_vwritepin+0x24>
 7f4:	80 95       	com	r24
 7f6:	82 23       	and	r24, r18
 7f8:	8b bb       	out	0x1b, r24	; 27
 7fa:	08 95       	ret
 7fc:	2b b3       	in	r18, 0x1b	; 27
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 804:	88 0f       	add	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	6a 95       	dec	r22
 80a:	e2 f7       	brpl	.-8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 80c:	82 2b       	or	r24, r18
 80e:	8b bb       	out	0x1b, r24	; 27
 810:	08 95       	ret
 812:	41 11       	cpse	r20, r1
 814:	0c c0       	rjmp	.+24     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 816:	28 b3       	in	r18, 0x18	; 24
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	02 c0       	rjmp	.+4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	6a 95       	dec	r22
 824:	e2 f7       	brpl	.-8      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 826:	80 95       	com	r24
 828:	82 23       	and	r24, r18
 82a:	88 bb       	out	0x18, r24	; 24
 82c:	08 95       	ret
 82e:	28 b3       	in	r18, 0x18	; 24
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	02 c0       	rjmp	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 836:	88 0f       	add	r24, r24
 838:	99 1f       	adc	r25, r25
 83a:	6a 95       	dec	r22
 83c:	e2 f7       	brpl	.-8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 83e:	82 2b       	or	r24, r18
 840:	88 bb       	out	0x18, r24	; 24
 842:	08 95       	ret
 844:	41 11       	cpse	r20, r1
 846:	0c c0       	rjmp	.+24     	; 0x860 <__stack+0x1>
 848:	25 b3       	in	r18, 0x15	; 21
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 c0       	rjmp	.+4      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	6a 95       	dec	r22
 856:	e2 f7       	brpl	.-8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 858:	80 95       	com	r24
 85a:	82 23       	and	r24, r18
 85c:	85 bb       	out	0x15, r24	; 21
 85e:	08 95       	ret
 860:	25 b3       	in	r18, 0x15	; 21
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	6a 95       	dec	r22
 86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
 870:	82 2b       	or	r24, r18
 872:	85 bb       	out	0x15, r24	; 21
 874:	08 95       	ret
 876:	41 11       	cpse	r20, r1
 878:	0c c0       	rjmp	.+24     	; 0x892 <__stack+0x33>
 87a:	22 b3       	in	r18, 0x12	; 18
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	88 0f       	add	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	6a 95       	dec	r22
 888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
 88a:	80 95       	com	r24
 88c:	82 23       	and	r24, r18
 88e:	82 bb       	out	0x12, r24	; 18
 890:	08 95       	ret
 892:	22 b3       	in	r18, 0x12	; 18
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
 89a:	88 0f       	add	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	6a 95       	dec	r22
 8a0:	e2 f7       	brpl	.-8      	; 0x89a <__stack+0x3b>
 8a2:	82 2b       	or	r24, r18
 8a4:	82 bb       	out	0x12, r24	; 18
 8a6:	08 95       	ret

000008a8 <DIO_vsetport_dir>:
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	fc 01       	movw	r30, r24
 8ac:	e1 54       	subi	r30, 0x41	; 65
 8ae:	f1 09       	sbc	r31, r1
 8b0:	e4 32       	cpi	r30, 0x24	; 36
 8b2:	f1 05       	cpc	r31, r1
 8b4:	58 f4       	brcc	.+22     	; 0x8cc <DIO_vsetport_dir+0x24>
 8b6:	ee 58       	subi	r30, 0x8E	; 142
 8b8:	ff 4f       	sbci	r31, 0xFF	; 255
 8ba:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__tablejump2__>
 8be:	6a bb       	out	0x1a, r22	; 26
 8c0:	08 95       	ret
 8c2:	67 bb       	out	0x17, r22	; 23
 8c4:	08 95       	ret
 8c6:	64 bb       	out	0x14, r22	; 20
 8c8:	08 95       	ret
 8ca:	61 bb       	out	0x11, r22	; 17
 8cc:	08 95       	ret

000008ce <DIO_vwrite_HIGHnibble>:
			break;
	}
}

void DIO_vwrite_HIGHnibble(unsigned char port,unsigned char value){
	value<<=4;
 8ce:	62 95       	swap	r22
 8d0:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	fc 01       	movw	r30, r24
 8d6:	e1 54       	subi	r30, 0x41	; 65
 8d8:	f1 09       	sbc	r31, r1
 8da:	e4 32       	cpi	r30, 0x24	; 36
 8dc:	f1 05       	cpc	r31, r1
 8de:	f8 f4       	brcc	.+62     	; 0x91e <DIO_vwrite_HIGHnibble+0x50>
 8e0:	ea 56       	subi	r30, 0x6A	; 106
 8e2:	ff 4f       	sbci	r31, 0xFF	; 255
 8e4:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__tablejump2__>
	{
		case 'A':
		case 'a':
			PORTA&=0x0f;
 8e8:	8b b3       	in	r24, 0x1b	; 27
 8ea:	8f 70       	andi	r24, 0x0F	; 15
 8ec:	8b bb       	out	0x1b, r24	; 27
			PORTA|=value;
 8ee:	8b b3       	in	r24, 0x1b	; 27
 8f0:	68 2b       	or	r22, r24
 8f2:	6b bb       	out	0x1b, r22	; 27
			break;
 8f4:	08 95       	ret
		case 'B':
		case 'b':
			PORTB&=0x0f;
 8f6:	88 b3       	in	r24, 0x18	; 24
 8f8:	8f 70       	andi	r24, 0x0F	; 15
 8fa:	88 bb       	out	0x18, r24	; 24
			PORTB|=value;
 8fc:	88 b3       	in	r24, 0x18	; 24
 8fe:	68 2b       	or	r22, r24
 900:	68 bb       	out	0x18, r22	; 24
			break;
 902:	08 95       	ret
		case 'C':
		case 'c':
			PORTC&=0x0f;
 904:	85 b3       	in	r24, 0x15	; 21
 906:	8f 70       	andi	r24, 0x0F	; 15
 908:	85 bb       	out	0x15, r24	; 21
			PORTC|=value;
 90a:	85 b3       	in	r24, 0x15	; 21
 90c:	68 2b       	or	r22, r24
 90e:	65 bb       	out	0x15, r22	; 21
			break;
 910:	08 95       	ret
		case 'D':
		case 'd':
			PORTD&=0x0f;
 912:	82 b3       	in	r24, 0x12	; 18
 914:	8f 70       	andi	r24, 0x0F	; 15
 916:	82 bb       	out	0x12, r24	; 18
			PORTD|=value;
 918:	82 b3       	in	r24, 0x12	; 18
 91a:	68 2b       	or	r22, r24
 91c:	62 bb       	out	0x12, r22	; 18
 91e:	08 95       	ret

00000920 <SPI_Slave_init>:
unsigned char SPI_Master_Transmit_char(unsigned char data){
	DIO_vwritepin('B',4,0); //Clear SS to send data to slave
	SPDR=data; //Put data in SPDR
	while(READ_BIT(SPSR,SPIF)==0); //Wait until Transmission is finished
	return SPDR; //Read SPDR
}
 920:	8d b1       	in	r24, 0x0d	; 13
 922:	80 64       	ori	r24, 0x40	; 64
 924:	8d b9       	out	0x0d, r24	; 13
 926:	41 e0       	ldi	r20, 0x01	; 1
 928:	66 e0       	ldi	r22, 0x06	; 6
 92a:	82 e4       	ldi	r24, 0x42	; 66
 92c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <DIO_vsetpin_dir>
 930:	08 95       	ret

00000932 <SPI_Slave_Receive_char>:
	DIO_vwritepin('B',4,0); //Clear SS to send data to slave
	SPDR=data; //Put data in SPDR
}
*/
unsigned char SPI_Slave_Receive_char(unsigned char data){
	SPDR=data; //Put data in SPDR
 932:	8f b9       	out	0x0f, r24	; 15
	while(READ_BIT(SPSR,SPIF)==0); //Wait until Transmission is finished
 934:	77 9b       	sbis	0x0e, 7	; 14
 936:	fe cf       	rjmp	.-4      	; 0x934 <SPI_Slave_Receive_char+0x2>
	return SPDR; //Read received data
 938:	8f b1       	in	r24, 0x0f	; 15
}
 93a:	08 95       	ret

0000093c <__tablejump2__>:
 93c:	ee 0f       	add	r30, r30
 93e:	ff 1f       	adc	r31, r31
 940:	05 90       	lpm	r0, Z+
 942:	f4 91       	lpm	r31, Z
 944:	e0 2d       	mov	r30, r0
 946:	09 94       	ijmp

00000948 <__umulhisi3>:
 948:	a2 9f       	mul	r26, r18
 94a:	b0 01       	movw	r22, r0
 94c:	b3 9f       	mul	r27, r19
 94e:	c0 01       	movw	r24, r0
 950:	a3 9f       	mul	r26, r19
 952:	70 0d       	add	r23, r0
 954:	81 1d       	adc	r24, r1
 956:	11 24       	eor	r1, r1
 958:	91 1d       	adc	r25, r1
 95a:	b2 9f       	mul	r27, r18
 95c:	70 0d       	add	r23, r0
 95e:	81 1d       	adc	r24, r1
 960:	11 24       	eor	r1, r1
 962:	91 1d       	adc	r25, r1
 964:	08 95       	ret

00000966 <_exit>:
 966:	f8 94       	cli

00000968 <__stop_program>:
 968:	ff cf       	rjmp	.-2      	; 0x968 <__stop_program>
